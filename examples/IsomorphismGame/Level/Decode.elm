module IsomorphismGame.Level.Decode exposing (decoder)

import Geometry
import IsomorphismGame.Graph as Graph exposing (VertexId)
import IsomorphismGame.Level as Level exposing (BaseGraph, Level, Level_PreEncoded, PlayerGraph, PlayerGraphVertexData)
import Json.Decode exposing (Decoder, Error, Value)
import Json.Decode.Pipeline exposing (required)
import Set exposing (Set(..))


decoder : Decoder Level
decoder =
    decoderForPreEncoded
        |> Json.Decode.map Level.fromPreEncoded



-- THE CODE BELOW IS GENERATED BY INTELLIJ ELM PLUGIN


decoderForPreEncoded : Decoder Level_PreEncoded
decoderForPreEncoded =
    Json.Decode.succeed Level_PreEncoded
        |> required "baseGraph" (Json.Decode.list (Json.Decode.map2 Tuple.pair (Json.Decode.index 0 Json.Decode.string) (Json.Decode.index 1 graphVertexDataDecoder)))
        |> required "playerGraph" (Json.Decode.list (Json.Decode.map2 Tuple.pair (Json.Decode.index 0 Json.Decode.string) (Json.Decode.index 1 graphVertexDataDecoder2)))



-- TODO: double-check generated code


geometryPointDecoder : Decoder Geometry.Point
geometryPointDecoder =
    Json.Decode.succeed Geometry.Point
        |> required "x" Json.Decode.float
        |> required "y" Json.Decode.float
        |> required "z" Json.Decode.float



-- TODO: double-check generated code


graphVertexDataDecoder : Decoder (Graph.VertexData ())
graphVertexDataDecoder =
    Json.Decode.succeed Graph.VertexData
        |> required "position" geometryPointDecoder
        |> required "outNeighbours" (Json.Decode.map Set.fromList (Json.Decode.list Json.Decode.int))
        |> required "data" (Json.Decode.succeed ())



-- TODO: double-check generated code


levelPlayerGraphVertexDataDecoder : Decoder Level.PlayerGraphVertexData
levelPlayerGraphVertexDataDecoder =
    Json.Decode.succeed Level.PlayerGraphVertexData
        |> required "mappedToBaseVertex" Json.Decode.int



-- TODO: double-check generated code


graphVertexDataDecoder2 : Decoder (Graph.VertexData PlayerGraphVertexData)
graphVertexDataDecoder2 =
    Json.Decode.succeed Graph.VertexData
        |> required "position" geometryPointDecoder
        |> required "outNeighbours" (Json.Decode.map Set.fromList (Json.Decode.list Json.Decode.int))
        |> required "data" levelPlayerGraphVertexDataDecoder
